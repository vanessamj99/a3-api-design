# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reddit_pb2 as reddit__pb2


class RedditStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/Reddit/CreatePost',
                request_serializer=reddit__pb2.Post.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.UpVote = channel.unary_unary(
                '/Reddit/UpVote',
                request_serializer=reddit__pb2.Post.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.DownVote = channel.unary_unary(
                '/Reddit/DownVote',
                request_serializer=reddit__pb2.Post.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.Retrieve = channel.unary_unary(
                '/Reddit/Retrieve',
                request_serializer=reddit__pb2.Post.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/Reddit/CreateComment',
                request_serializer=reddit__pb2.Comment.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.RetrieveListOfNMostUpvotedComments = channel.unary_stream(
                '/Reddit/RetrieveListOfNMostUpvotedComments',
                request_serializer=reddit__pb2.TopN.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/Reddit/ExpandCommentBranch',
                request_serializer=reddit__pb2.Comment.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.Update = channel.unary_unary(
                '/Reddit/Update',
                request_serializer=reddit__pb2.Post.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )


class RedditServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveListOfNMostUpvotedComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """extra credit:
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=reddit__pb2.Post.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'UpVote': grpc.unary_unary_rpc_method_handler(
                    servicer.UpVote,
                    request_deserializer=reddit__pb2.Post.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'DownVote': grpc.unary_unary_rpc_method_handler(
                    servicer.DownVote,
                    request_deserializer=reddit__pb2.Post.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=reddit__pb2.Post.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=reddit__pb2.Comment.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'RetrieveListOfNMostUpvotedComments': grpc.unary_stream_rpc_method_handler(
                    servicer.RetrieveListOfNMostUpvotedComments,
                    request_deserializer=reddit__pb2.TopN.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=reddit__pb2.Comment.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=reddit__pb2.Post.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reddit', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reddit(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit/CreatePost',
            reddit__pb2.Post.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit/UpVote',
            reddit__pb2.Post.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit/DownVote',
            reddit__pb2.Post.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit/Retrieve',
            reddit__pb2.Post.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit/CreateComment',
            reddit__pb2.Comment.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveListOfNMostUpvotedComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Reddit/RetrieveListOfNMostUpvotedComments',
            reddit__pb2.TopN.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit/ExpandCommentBranch',
            reddit__pb2.Comment.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit/Update',
            reddit__pb2.Post.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
